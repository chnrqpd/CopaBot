name: Deploy Discord Bot

# Define quando o workflow será executado
on:
  push:
    branches: [ main ]  # Executa quando há push na branch main
  workflow_dispatch:    # Permite execução manual através da interface do GitHub

# Define as permissões necessárias para o workflow
permissions:
  contents: read
  packages: write    # Necessário para publicar no GitHub Container Registry

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Faz checkout do código do repositório
      - name: Checkout code
        uses: actions/checkout@v3

      # Configura o Docker Buildx para construir imagens multiplataforma
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Faz login no GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
       
      - name: Prepare repository name
        run: |
          echo "REPO_LOWER=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
          
      # Constrói e publica a imagem Docker
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ format(github.repository, 'lower') }}:latest
            ghcr.io/${{ format(github.repository, 'lower') }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Faz o deploy na VM Oracle
      - name: Deploy to Oracle Cloud
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ORACLE_HOST }}
          username: ${{ secrets.ORACLE_USERNAME }}
          key: ${{ secrets.ORACLE_SSH_KEY }}
          script: |
            # Navega até o diretório do projeto
            cd ~/copa-bot

            # Puxa a nova imagem
            docker pull ghcr.io/${{ github.repository }}:latest

            # Para e remove o container antigo se existir
            docker-compose down

            # Inicia o novo container
            docker-compose up -d

            # Remove imagens antigas não utilizadas
            docker image prune -af